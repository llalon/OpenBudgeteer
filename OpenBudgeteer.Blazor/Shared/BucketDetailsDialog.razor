@using ApexCharts
@using OpenBudgeteer.Blazor.Common
@using OpenBudgeteer.Blazor.ViewModels
@using System.Globalization
@using OpenBudgeteer.Core.Common
@using OpenBudgeteer.Core.ViewModels.EntityViewModels
@using Color = MudBlazor.Color
@using Size = MudBlazor.Size

<MudDialog Class="dialog-background">
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>
    <DialogContent>
        <MudTabs Outlined="true">
            <MudTabPanel Text="Movements">
                <MudCheckBox T="bool" Value="IncludeBucketMovements" Label="Show Bucket Movements" ValueChanged="IncludeBucketMovementCheckboxChanged"/>
                <MudDataGrid
                    T="TransactionViewModel"
                    Items="@DataContext.BucketMovementsData.Transactions"
                    Dense="true"
                    Elevation="0"
                    Filterable="true"
                    Hover="true"
                    ReadOnly="true">
                    <Columns>
                        <PropertyColumn Property="x => x.TransactionDate" Title="Date">
                            <CellTemplate>
                                <MudText>@context.Item.TransactionDate.ToShortDateString()</MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.SelectedAccount" Title="Account" CellStyle="min-width: 150px">
                            <CellTemplate>
                                <MudText>@context.Item.SelectedAccount.Name</MudText>
                            </CellTemplate>
                        </PropertyColumn>
                        <PropertyColumn Property="x => x.Payee"/>
                        <PropertyColumn Property="x => x.Memo"/>
                        <PropertyColumn Property="x => x.Amount">
                            <CellTemplate>
                                @if (context.Item.Buckets.Count <= 1)
                                {
                                    <MudText Class="col-numbers">@context.Item.Amount.ToString("C", CultureInfo.CurrentCulture)</MudText>
                                }
                                else
                                {
                                    <MudText Class="col-numbers">@context.Item.Buckets.Where(b => b.SelectedBucketId == DataContext.BucketId).Sum(b => b.Amount).ToString("C", CultureInfo.CurrentCulture)*</MudText>
                                }
                            </CellTemplate>
                        </PropertyColumn>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>
            <MudTabPanel Text="Statistics">
                <MudGrid>
                    <MudItem md="6" sm="12" Class="p-1 mt-2">
                        <MudPaper Outlined="true">
                            <MudText Typo="Typo.h5" Class="report-chart-header">Month Balances</MudText>
                            <ApexChart 
                                @ref="_monthBalanceChart" 
                                TItem="ReportRecord"
                                Options="@(new ApexChartOptions<ReportRecord> { Theme = BaseTheme })">
                                <ApexPointSeries
                                    TItem="ReportRecord"
                                    Items="DataContext.MonthBalances"
                                    Name="Balance"
                                    SeriesType="SeriesType.Bar"
                                    XValue="i => i.Label"
                                    YValue="i => i.Value"
                                    DataPointMutator="ApexHelper.BalanceChartMutator"/>
                            </ApexChart>
                        </MudPaper>
                    </MudItem>
                    <MudItem md="6" sm="12" Class="p-1 mt-2">
                        <MudPaper Outlined="true">
                            <MudText Typo="Typo.h5" Class="report-chart-header">Input & Output</MudText>
                            <ApexChart 
                                @ref="_monthInputOutputChart" 
                                TItem="ReportRecord" 
                                Options="MonthInputOutputChartOptions">
                                <ApexPointSeries
                                    TItem="ReportRecord"
                                    Items="DataContext.MonthInput"
                                    Name="Input"
                                    SeriesType="SeriesType.Bar"
                                    XValue="i => i.Label"
                                    YValue="i => i.Value"
                                    Color=@System.Drawing.Color.Green.ToHexString()/>
                                <ApexPointSeries
                                    TItem="ReportRecord"
                                    Items="DataContext.MonthOutput"
                                    Name="Output"
                                    SeriesType="SeriesType.Bar"
                                    XValue="i => i.Label"
                                    YValue="i => i.Value"
                                    Color=@System.Drawing.Color.DarkRed.ToHexString()/>
                            </ApexChart>
                        </MudPaper>
                    </MudItem>
                    <MudItem sm="12" Class="p-1">
                        <MudPaper Outlined="true">
                            <MudText Typo="Typo.h5" Class="report-chart-header">Balance Progression</MudText>
                            <ApexChart 
                                @ref="_bucketProgressionChart" 
                                TItem="ReportRecord" 
                                Height="300"
                                Options="@(new ApexChartOptions<ReportRecord> { Theme = BaseTheme })">
                                <ApexPointSeries
                                    TItem="ReportRecord"
                                    Items="DataContext.BucketProgression"
                                    Name="Balance"
                                    SeriesType="SeriesType.Area"
                                    XValue="i => i.Label"
                                    YValue="i => i.Value"
                                    Color=@System.Drawing.Color.Green.ToHexString()/>
                            </ApexChart>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Size="Size.Small" Color="Color.Error" OnClick="CloseDialog">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; } = null!;
    
    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public BlazorBucketStatisticsViewModel DataContext { get; set; } = null!;

    [Parameter]
    public bool IsDialogVisible { get; set; }

    [Parameter]
    public bool IsDialogLoading { get; set; }
    
    [Parameter]
    public bool IncludeBucketMovements { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    private ApexChart<ReportRecord>? _monthBalanceChart;
    private ApexChart<ReportRecord>? _monthInputOutputChart;
    private ApexChart<ReportRecord>? _bucketProgressionChart;
    
    private Theme BaseTheme => new()
    {
        Mode = AppSettings.Mode == AppSettings.ThemeMode.Dark ? Mode.Dark : Mode.Light, 
        Palette = PaletteType.Palette1
    };
    
    private ApexChartOptions<ReportRecord> MonthInputOutputChartOptions => new()
    {
        Theme = BaseTheme,
        Legend = new() { Show = false }
    };

    private void CloseDialog() => MudDialog.Close(DialogResult.Ok(true));

    private async Task IncludeBucketMovementCheckboxChanged(bool obj)
    {
        IncludeBucketMovements = obj;
        await DataContext.LoadBucketMovementsDataAsync(IncludeBucketMovements);
        StateHasChanged();
        var tasks = new List<Task>();
        if (_monthBalanceChart != null) tasks.Add(_monthBalanceChart.UpdateSeriesAsync());
        if (_monthInputOutputChart != null) tasks.Add(_monthInputOutputChart.UpdateSeriesAsync());
        if (_bucketProgressionChart != null) tasks.Add(_bucketProgressionChart.UpdateSeriesAsync());
        
        await Task.WhenAll(tasks);
    }
}
